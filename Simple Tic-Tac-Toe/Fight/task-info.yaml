type: edu
custom_name: Fight!
files:
- name: src/tictactoe/Main.kt
  visible: true
  text: "package tictactoe\n\nfun main() {\n    //Variavel para imprimir o tabuleiro\
    \ vazio\n    val entradaPadrao = \"_________\"\n\n    // Variavel para localizar\
    \ onde deve ser preenchido a jogada\n    val cordenadas = mutableListOf(\n   \
    \     mutableListOf(entradaPadrao[0], entradaPadrao[1], entradaPadrao[2]),\n \
    \       mutableListOf(entradaPadrao[3], entradaPadrao[4], entradaPadrao[5]),\n\
    \        mutableListOf(entradaPadrao[6], entradaPadrao[7], entradaPadrao[8])\n\
    \    )\n    \n    rodarJogo(cordenadas,entradaPadrao)\n}\n\nfun rodarJogo(cordenadas:MutableList<MutableList<Char>>,entradaPadrao:\
    \ String) {\n//    1. Imprime uma grade vazia no início do jogo.\n\n//    2. Cria\
    \ um loop de jogo onde o programa pede ao usuário para inserir as coordenadas\
    \ da célula,\n//    analisa o movimento para correção e mostra uma grade com as\
    \ alterações se tudo estiver bem.\n\n//    3. Termina o jogo quando alguém ganha\
    \ ou há um empate.\n    \n    \n    // contador para verificar de quem é a vez\
    \ de jogar\n    var contador = 0\n\n    // Imprime a tabela do jogo com a entrada\
    \ padrao\n    interfaceJogoDaVelha(cordenadas)\n\n    // Recebe a jogada primeiro\
    \ do jogador X e depois do jogador O e verfica quem ganhou\n    while (true) {\n\
    \        if (\n            verificaResultado(entradaPadrao) == \"Draw\" ||\n \
    \           verificaResultado(entradaPadrao) == \"X wins\" ||\n            verificaResultado(entradaPadrao)\
    \ == \"O wins\"\n        ) break\n\n        if (contador % 2 == 0) {\n       \
    \     interageComUsuario(cordenadas, 'X')\n        } else {\n            interageComUsuario(cordenadas,\
    \ 'O')\n        }\n        var entradaPadrao = \"\"\n\n        for (lista in cordenadas)\
    \ {\n            for (item in lista) {\n                entradaPadrao += item\n\
    \            }\n        }\n        contador++\n    }\n\n    // mostra o resultado\
    \ da partida se tudo ocorrer sem erros!!\n    println(verificaResultado(entradaPadrao))\n\
    }\n\n\nfun interageComUsuario(cordenadas: MutableList<MutableList<Char>>, jogador:\
    \ Char) {\n    // 1. Recebe a jogada do ususário e verifica se é um número\n\n\
    \    // 2. Verifica se as cordenadas passada pelo mesmo é válida e se não está\
    \ ocupado por outra célula\n\n    // 3. Se tudo ocorrer sem erros, imprimi a tabela\n\
    \n\n    var teste = false\n    while (!teste) {\n        val entradaUsuario =\
    \ readln()\n        val coluna = entradaUsuario[0].digitToIntOrNull()\n      \
    \  val linha = entradaUsuario[2].digitToIntOrNull()\n\n\n        if (coluna ==\
    \ null || linha == null) {\n            teste = false\n            println(\"\
    You should enter numbers!\")\n        } else if (linha !in 1..3 || coluna !in\
    \ 1..3) {\n            teste = false\n            println(\"Coordinates should\
    \ be from 1 to 3!\")\n        } else if ('X' == cordenadas[coluna - 1][linha -\
    \ 1] || 'O' == cordenadas[coluna - 1][linha - 1]) {\n            teste = false\n\
    \            println(\"This cell is occupied! Choose another one!\")\n       \
    \ } else {\n            teste = true\n            cordenadas[coluna - 1][linha\
    \ - 1] = jogador\n            interfaceJogoDaVelha(cordenadas)\n        }\n  \
    \  }\n}\n\n\nfun verificaResultado(entradaPadrao: String): String {\n    // 1.\
    \ Cria 3 sublistas quem verifica todas as possiveis vitorias dos dois jogadores\n\
    \n    // 2. Verifica se as jogadas são validas e se um jogador não jogou mais\
    \ que o outro\n\n    // 3. Verifica o resultado da partida -> vitória, empate,\
    \ derrota\n\n    val lista = listOf(\n        0, 4, 8, 2, 4, 6, 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 0, 3, 6, 1, 4, 7, 2, 5, 8\n    ).chunked(3)\n\n    val countX =\
    \ entradaPadrao.count { it == 'X' }\n    val countO = entradaPadrao.count { it\
    \ == 'O' }\n    val countVazio = entradaPadrao.count { it == '_' }\n    var verificaX\
    \ = 0\n    var verificaO = 0\n\n    for (tresPosicao in lista) {\n        var\
    \ str = \"\"\n        for (item in tresPosicao) {\n            str += entradaPadrao[item]\n\
    \            if (str == \"XXX\") {\n                verificaX++\n            }\
    \ else if (str == \"OOO\") {\n                verificaO++\n            }\n   \
    \     }\n    }\n\n\n    val resultado = when {\n        countX - countO > 1 ||\
    \ countO - countX > 1 -> \"Impossible\"\n        verificaX > 0 && verificaO >\
    \ 0 -> \"Impossible\"\n        verificaX == 0 && verificaO == 0 && countVazio\
    \ > 0 -> \"Game not finished\"\n        verificaX == 0 && verificaO == 0 && countVazio\
    \ == 0 -> \"Draw\"\n        verificaX == 1 && verificaO == 0 -> \"X wins\"\n \
    \       verificaX == 0 && verificaO == 1 -> \"O wins\"\n        else -> \"\"\n\
    \    }\n    return resultado\n}\n\n\nfun interfaceJogoDaVelha(cordenadas: MutableList<MutableList<Char>>)\
    \ {\n    // Cria a tabela do jogo através das cordenadas padrão.\n\n    linha()\n\
    \    for (lista in cordenadas) {\n        println(\"| ${lista.joinToString(\"\
    \ \")} |\")\n    }\n    linha()\n}\n\n\nfun linha() {\n    println(\"---------\"\
    )\n}"
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (! (lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/10479#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 12 Nov 2022 02:35:24 UTC"
record: 4
